# mediapip
FACE_CONNECTIONS = frozenset([
    # Left eye.
    (263, 249),
    (249, 390),
    (390, 373),
    (373, 374),
    (374, 380),
    (380, 381),
    (381, 382),
    (382, 362),
    (263, 466),
    (466, 388),
    (388, 387),
    (387, 386),
    (386, 385),
    (385, 384),
    (384, 398),
    (398, 362),
    # Left eyebrow.
    # (276, 283),
    # (283, 282),
    # (282, 295),
    # (295, 285),
    # (300, 293),
    # (293, 334),
    # (334, 296),
    # (296, 336),
    # Right eye.
    (33, 7),
    (7, 163),
    (163, 144),
    (144, 145),
    (145, 153),
    (153, 154),
    (154, 155),
    (155, 133),
    (33, 246),
    (246, 161),
    (161, 160),
    (160, 159),
    (159, 158),
    (158, 157),
    (157, 173),
    (173, 133),
    # Right eyebrow.
    # (46, 53),
    # (53, 52),
    # (52, 65),
    # (65, 55),
    # (70, 63),
    # (63, 105),
    # (105, 66),
    # (66, 107),
])


blinkdetect/models.py scripts/eye_landmarks_predict.py scripts/retina_predict.py scripts/retina_predict_dets.py scripts/signals_generation.py third-party/IctuOculi

dataframe
participant_id, frame_num, path, mean, std, eyelids_dist

cat .ssh/id_rsa.pub >> .ssh/authorized_keys


cat ~/.ssh/id_rsa.pub | ssh -p 10113 zidan@nipg11@inf.elte.hu "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"




python3 scripts/color_change.py -pid 38 --resume && python3 scripts/color_change.py -pid 35 --resume && python3 scripts/color_change.py -pid 37 --resume && python3 scripts/color_change.py -pid 40 --resume && python3 scripts/color_change.py -pid 42 --resume && python3 scripts/color_change.py -pid 47 --resume


// face detection
python3 ./scripts/detect_faces.py -pid 37 --batch 256 --resume && \
python3 ./scripts/detect_faces.py -pid 38 --batch 256 --resume && \
python3 ./scripts/detect_faces.py -pid 40 --batch 256 --resume && \
python3 ./scripts/detect_faces.py -pid 42 --batch 256 --resume && \
python3 ./scripts/detect_faces.py -pid 47 --batch 256 --resume

// estimate head poses
python3 ./estimate_head_poses.py -pid 35 && \
python3 ./estimate_head_poses.py -pid 37 && \
python3 ./estimate_head_poses.py -pid 38 && \
python3 ./estimate_head_poses.py -pid 40 && \
python3 ./estimate_head_poses.py -pid 42 && \
python3 ./estimate_head_poses.py -pid 47


----------------------------------------------------------------
// tracking
python scripts/track_faces.py -pid 35 --closest && \
python scripts/draw_tracked_faces.py -pid 35 && \
python scripts/track_faces.py -pid 37 --closest && \
python scripts/draw_tracked_faces.py -pid 37 && \
python scripts/track_faces.py -pid 38 --closest && \
python scripts/draw_tracked_faces.py -pid 38 && \
python scripts/track_faces.py -pid 40 --closest && \
python scripts/draw_tracked_faces.py -pid 40 && \
python scripts/track_faces.py -pid 42 --closest && \
python scripts/draw_tracked_faces.py -pid 42 && \
python scripts/track_faces.py -pid 47 --closest && \
python scripts/draw_tracked_faces.py -pid 47


// eye landmarks
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/35/aligned_faces/ --batch 265 -pid 35 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/37/aligned_faces/ --batch 265 -pid 37 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/38/aligned_faces/ --batch 265 -pid 38 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/40/aligned_faces/ --batch 265 -pid 40 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/42/aligned_faces/ --batch 265 -pid 42 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/47/aligned_faces/ --batch 265 -pid 47 &&

python scripts/predict_eye_landmarks.py --batch 265 -pid 35 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 37 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 38 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 40 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 42 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 47 &&

// tracking --> eye landmarks
python scripts/track_faces.py --batch 265 --closest -pid 35 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/35/aligned_faces/ --batch 265 -pid 35 && \
python scripts/track_faces.py --batch 265 --closest -pid 37 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/37/aligned_faces/ --batch 265 -pid 37 && \
python scripts/track_faces.py --batch 265 --closest -pid 38 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/38/aligned_faces/ --batch 265 -pid 38 && \
python scripts/track_faces.py --batch 265 --closest -pid 40 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/40/aligned_faces/ --batch 265 -pid 40 && \
python scripts/track_faces.py --batch 265 --closest -pid 42 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/42/aligned_faces/ --batch 265 -pid 42 && \
python scripts/track_faces.py --batch 265 --closest -pid 47 && \
python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/47/aligned_faces/ --batch 265 -pid 47
// one line
python scripts/track_faces.py --batch 265 --closest -pid 35 && python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/35/aligned_faces/ --batch 265 -pid 35 && python scripts/track_faces.py --batch 265 --closest -pid 37 && python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/37/aligned_faces/ --batch 265 -pid 37 && python scripts/track_faces.py --batch 265 --closest -pid 38 && python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/38/aligned_faces/ --batch 265 -pid 38 && python scripts/track_faces.py --batch 265 --closest -pid 40 && python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/40/aligned_faces/ --batch 265 -pid 40 && python scripts/track_faces.py --batch 265 --closest -pid 42 && python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/42/aligned_faces/ --batch 265 -pid 42 && python scripts/track_faces.py --batch 265 --closest -pid 47 && python scripts/predict_eye_landmarks.py --save_faces ./dataset/tracked_faces/47/aligned_faces/ --batch 265 -pid 47

// generate signals
python scripts/generate_signals.py --select_eye best -pid 35 && \
python scripts/generate_signals.py --select_eye best -pid 37 && \
python scripts/generate_signals.py --select_eye best -pid 38 && \
python scripts/generate_signals.py --select_eye best -pid 40 && \
python scripts/generate_signals.py --select_eye best -pid 42 && \
python scripts/generate_signals.py --select_eye best -pid 47

python scripts/track_faces.py --batch 265 --closest -pid 35 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 35 && \
python scripts/color_change_timeseries.py --select_eye best --range 40 --generate_plots -pid 35

python scripts/track_faces.py --batch 265 --closest -pid 37 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 37 && \
python scripts/generate_signals.py --select_eye best --range 40 --generate_plots -pid 37 && \
python scripts/track_faces.py --batch 265 --closest -pid 38 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 38 && \
python scripts/generate_signals.py --select_eye best --range 40 --generate_plots -pid 38 && \
python scripts/track_faces.py --batch 265 --closest -pid 40 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 40 && \
python scripts/generate_signals.py --select_eye best --range 40 --generate_plots -pid 40 && \
python scripts/track_faces.py --batch 265 --closest -pid 42 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 42 && \
python scripts/generate_signals.py --select_eye best --range 40 --generate_plots -pid 42 && \
python scripts/track_faces.py --batch 265 --closest -pid 47 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 47 && \
python scripts/generate_signals.py --select_eye best --range 40 --generate_plots -pid 47

// Eyelandmarks --> signals
python scripts/predict_eye_landmarks.py --batch 265 -pid 35 && \
python scripts/generate_signals.py --select_eye best --range 40 -pid 35 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 37 && \
python scripts/generate_signals.py --select_eye best --range 40 -pid 37 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 38 && \
python scripts/generate_signals.py --select_eye best --range 40 -pid 38 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 40 && \
python scripts/generate_signals.py --select_eye best --range 40 -pid 40 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 42 && \
python scripts/generate_signals.py --select_eye best --range 40 -pid 42 && \
python scripts/predict_eye_landmarks.py --batch 265 -pid 47 && \
python scripts/generate_signals.py --select_eye best --range 40 -pid 47


python scripts/predict_eye_landmarks.py --batch 265 -pid 40 && \
python scripts/generate_signals.py --select_eye best --generate_plots -pid 40







#
python data_preparation.py --output_folder ../dataset/augmented_signals/shifted_with_actual_data/noblink_more_than_once_15_frames_step/ --face_found --yaw_range 45

# version 0
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v0 --no_blink 1 --generate_plots
# version 0.1
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v0.1 --no_blink 1 --face_found
# version 1
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v1 --overlap 10 --face_found --generate_plots
# version 2
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v2 --overlap 10 --face_found --yaw_range 90 --generate_plots 

# version 3
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3 --overlap 10 --face_found --yaw_range 60 --generate_plots

# version 3.1
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.1 --overlap 10 --face_found --yaw_range 60 --pitch_range 60 --generate_plots
# version 3.1.0
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.1.0 --overlap 10 --face_found --yaw_range 60 --pitch_range 60 --generate_plots
# version 3.1.1
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.1.1 --overlap 15 --face_found --yaw_range 60 --pitch_range 60 --generate_plots

# version 3.2
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.2 --overlap 10 --face_found --yaw_range 60 --pitch_range 45 --generate_plots
# version 3.2.0
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.2.0 --overlap 10 --face_found --yaw_range 60 --pitch_range 45
# version 3.2.0n
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.2.0n --overlap 10 --face_found --yaw_range 60 --pitch_range 45 --normalized
# version 3.2.1
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.2.1 --overlap 15 --face_found --yaw_range 60 --pitch_range 45 --generate_plots

# version 3.3
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.3 --overlap 10 --face_found --yaw_range 60 --pitch_range 30
# version 3.3.0
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.3.0 --overlap 10 --face_found --yaw_range 60 --pitch_range 30
# version 3.3.1
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v3.3.1 --overlap 15 --face_found --yaw_range 60 --pitch_range 30

# version 4
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix v4 --overlap 10 --face_found --yaw_range 30 --generate_plots 

# version test
python data_preparation.py --output_folder ../dataset/augmented_signals/versions --suffix vtest --overlap 10 --face_found --yaw_range 30





python train_blinkdetector.py --annotation_file ./dataset/augmented_signals/versions/annotations-v0.json --dataset_path ./dataset/augmented_signals/versions/v0/training --prefix arch6.2-lossweight && \
python train_blinkdetector.py --annotation_file ./dataset/augmented_signals/versions/annotations-v0.1.json --dataset_path ./dataset/augmented_signals/versions/v0.1/training --prefix arch6.2-lossweight && \
python train_blinkdetector.py --annotation_file ./dataset/augmented_signals/versions/annotations-v1.json --dataset_path ./dataset/augmented_signals/versions/v1/training --prefix arch6.2-lossweight && \
python train_blinkdetector.py --annotation_file ./dataset/augmented_signals/versions/annotations-v2.json --dataset_path ./dataset/augmented_signals/versions/v2/training --prefix arch6.2-lossweight && \
python train_blinkdetector.py --annotation_file ./dataset/augmented_signals/versions/annotations-v3.json --dataset_path ./dataset/augmented_signals/versions/v3/training --prefix arch6.2-lossweight && \
python train_blinkdetector.py --annotation_file ./dataset/augmented_signals/versions/annotations-v4.json --dataset_path ./dataset/augmented_signals/versions/v4/training --prefix arch6.2-lossweight






# BATCH_SIZE = 2
        # EPOCH = 30
        # tn: 26, fp: 38, fn: 13, tp: 237
        # dropout
        # tn: 23, fp: 41, fn: 5, tp: 245
        # 2
        # 50
        # tn: 33, fp: 31, fn: 30, tp: 220
        return Sequential(OrderedDict([ 
                          ('conv1d_1', Conv1d(input_dim, 32, 3, 1)), # 26
                          ('batchnorm1_1', BatchNorm1d(32)),
                          ('relu1', ReLU()),
                          ('conv1d_2', Conv1d(32, 16, 3, 1)), # 22
                        #   ('batchnorm1_2', BatchNorm1d(16)),
                          ('relu2', ReLU()),
                          ('conv1d_3', Conv1d(16, 8, 3, 1)), # 18 
                        #   ('batchnorm1_3', BatchNorm1d(8)),
                          ('relu3', ReLU()),
                          ('flatten', Flatten()),
                        #   ('batchnorm1_4', BatchNorm1d(output_dim)),
                          ('fc_conv', Linear(192, output_dim)),
                        #   ('batchnorm1_4', BatchNorm1d(output_dim)),
                          ]))


        # BATCH_SIZE = 2
        # EPOCH = 50
        # tn: 33, fp: 31, fn: 24, tp: 226
        # dropout 0.2
        # tn: 28, fp: 36, fn: 19, tp: 231
        # BATCH_SIZE = 4
        # EPOCH = 50
        # tn: 32, fp: 32, fn: 27, tp: 223
        # dropout 0.2
        # tn: 32, fp: 32, fn: 23, tp: 227
        # BATCH_SIZE = 8
        # EPOCH = 50
        # tn: 31, fp: 33, fn: 18, tp: 232
        # dropout 0.2
        # tn: 29, fp: 35, fn: 23, tp: 227
        return Sequential(OrderedDict([ 
                          ('conv1d_1', Conv1d(input_dim, 32, 3, 1)), # 26
                          ('batchnorm1_1', BatchNorm1d(32)),
                          ('relu1', ReLU()),
                          ('conv1d_2', Conv1d(32, 16, 3, 1)), # 22
                          ('batchnorm1_2', BatchNorm1d(16)),
                          ('relu2', ReLU()),
                          ('conv1d_3', Conv1d(16, 8, 3, 1)), # 18 
                        #   ('batchnorm1_3', BatchNorm1d(8)),
                          ('relu3', ReLU()),
                          ('flatten', Flatten()),
                        #   ('batchnorm1_4', BatchNorm1d(output_dim)),
                          ('fc_conv', Linear(192, output_dim)),
                        #   ('batchnorm1_4', BatchNorm1d(output_dim)),
                          ]))

        # BATCH_SIZE = 2
        # EPOCH = 50
        # tn: 22, fp: 42, fn: 26, tp
        # dropout 0.2
        # tn: 25, fp: 39, fn: 16, tp: 234
        # BATCH_SIZE = 4
        # EPOCH = 50
        # tn: 30, fp: 34, fn: 24, tp: 226
        # dropout 0.2
        # tn: 28, fp: 36, fn: 22, tp
        # BATCH_SIZE = 8
        # EPOCH = 50
        # tn: 27, fp: 37, fn: 19, tp: 231
        # dropout 0.2
        # tn: 30, fp: 34, fn: 21, tp: 229
        return Sequential(OrderedDict([ 
                          ('conv1d_1', Conv1d(input_dim, 32, 3, 1)), # 26
                          ('batchnorm1_1', BatchNorm1d(32)),
                          ('relu1', ReLU()),
                          ('conv1d_2', Conv1d(32, 16, 3, 1)), # 22
                          ('batchnorm1_2', BatchNorm1d(16)),
                          ('relu2', ReLU()),
                          ('conv1d_3', Conv1d(16, 8, 3, 1)), # 18 
                          ('batchnorm1_3', BatchNorm1d(8)),
                          ('relu3', ReLU()),
                          ('flatten', Flatten()),
                        #   ('batchnorm1_4', BatchNorm1d(output_dim)),
                          ('fc_conv', Linear(192, output_dim)),
                        #   ('batchnorm1_4', BatchNorm1d(output_dim)),
                          ]))
        
        return Sequential(OrderedDict([ 
                          ('conv1d_1', Conv1d(input_dim, 32, 3, 1)), # 28
                          ('batchnorm1_1', BatchNorm1d(32)),
                          ('maxpool1d_1', MaxPool1d(2,1)), # 14
                          ('relu1', ReLU()),
                          ('conv1d_2', Conv1d(32, 16, 3, 1)), # 12
                          ('batchnorm1_2', BatchNorm1d(16)),
                          ('relu2', ReLU()),
                          ('conv1d_3', Conv1d(16, 8, 3, 1)), # 10
                        #   ('batchnorm1_3', BatchNorm1d(8)),
                          ('relu3', ReLU()),
                          ('flatten', Flatten()),
                          ('fc_conv', Linear(192, output_dim)),
                          ]))

        
        # BATCH_SIZE = 8
        # EPOCH = 80
        # ('dropout', Dropout(0.1)) in build_mlp
        # tn: 15, fp: 16, fn: 5, tp: 251
        # return Sequential(Conv1d(input_dim, 32, 5, 1), # 26
        #                   MaxPool1d(2,1), # 25
        #                   ReLU(),
        #                   Conv1d(32, 16, 3, 1), # 23
        #                   MaxPool1d(2,2), # 22
        #                   ReLU(),
        #                   Flatten(),
        #                   Linear(176, output_dim),)

        # BATCH_SIZE = 8
        # EPOCH = 80
        # tn: 17, fp: 14, fn: 9, tp: 247
        # return Sequential(Conv1d(input_dim, 32, 5, 1), # 26
        #                   MaxPool1d(5,2), # 11
        #                   ReLU(),
        #                   Conv1d(32, 16, 3, 1), # 26 , 9
        #                   ReLU(),
        #                   Flatten(),
        #                   Dropout(0.2),
        #                   Linear(144, output_dim),)
        # BATCH_SIZE = 8
        # EPOCH = 80
        # tn: 17, fp: 14, fn: 7, tp: 249
        # return Sequential(Conv1d(input_dim, 32, 5, 1), # 26
        #                   MaxPool1d(5,2), # 11
        #                   ReLU(),
        #                   Conv1d(32, 16, 3, 1), # 26 , 9
        #                   ReLU(),
        #                   Flatten(),
        #                   Dropout(0.1),
        #                   Linear(144, output_dim),
        #                   )
        # BATCH_SIZE = 8
        # EPOCH = 80
        # tn: 15, fp: 16, fn: 6, tp: 250█
        # return Sequential(Conv1d(input_dim, 32, 5, 1), # 26
        #                   ReLU(),
        #                   MaxPool1d(5,2), # 11
        #                   Conv1d(32, 16, 3, 1), # 26 , 9
        #                   ReLU(),
        #                   Flatten(),
        #                   Dropout(0.1),
        #                   Linear(144, output_dim),
        #                   )
        # BATCH_SIZE = 8
        # EPOCH = 80
        # tn: 13, fp: 18, fn: 11, tp: 245
        # return Sequential(Conv1d(input_dim, 32, 3, 1), # 28
        #                   ReLU(),
        #                   MaxPool1d(5,2), # 12
        #                   Conv1d(32, 16, 3, 1), # 26 , 10
        #                   ReLU(),
        #                   Flatten(),
        #                   Dropout(0.2),
        #                   Linear(160, output_dim),)
        
        # BATCH_SIZE = 8
        # EPOCH = 80
        # tn: 18, fp: 13, fn: 10, tp: 246
        # return Sequential(Conv1d(input_dim, 32, 3, 1), # 28
        #                   ReLU(),
        #                   MaxPool1d(5,2), # 12
        #                   Conv1d(32, 16, 3, 1), # 26 , 10
        #                   ReLU(),
        #                   Flatten(),
        #                   Dropout(0.1),
        #                   Linear(160, output_dim),
        #                   )
        # BATCH_SIZE = 16
        # EPOCH = 160
        # tn: 11, fp: 20, fn: 9, tp: 247
        # BATCH_SIZE = 4
        # EPOCH = 80
        # tn: 9, fp: 22, fn: 7, tp: 249
        # BATCH_SIZE = 8
        # EPOCH = 100
        # tn: 14, fp: 17, fn: 12, tp: 244
        # BATCH_SIZE = 8
        # EPOCH = 80
        # tn: 11, fp: 20, fn: 9, tp: 247
        # return Sequential(Conv1d(input_dim, 32, 3, 1), # 28
        #                   ReLU(),
        #                   MaxPool1d(2,2), # 14
        #                   Conv1d(32, 16, 3, 1), # 26 , 12
        #                   ReLU(),
        #                   Flatten(),
        #                   Dropout(0.1),
        #                   Linear(192, output_dim),
        #                   )
        # BATCH_SIZE = 8
        # EPOCH = 80
        # tn: 19, fp: 12, fn: 11, tp: 245
        # 40 Epochs
        # batch size: 8
        # tn: 7, fp: 24, fn: 4, tp: 252
        # 40 Epochs
        # batch size: 4
        # tn: 12, fp: 19, fn: 12, tp: 244
        # 20 Epochs
        # batch size: 4
        # tn: 4, fp: 27, fn: 1, tp: 255
        # 20 Epochs
        # batch size: 2
        # tn: 11, fp: 20, fn: 11, tp: 245
        # return Sequential(Conv1d(input_dim, 32, 3, 1), # 28
        #                   ReLU(),
        #                   MaxPool1d(2,2), # 14
        #                   Conv1d(32, 16, 3, 1), # 26 , 12
        #                   ReLU(),
        #                   Flatten(),
        #                   Linear(192, output_dim),
        #                   )

        # tn: 6, fp: 25, fn: 1, tp: 255
        # return Sequential(Conv1d(input_dim, 16, 3, 1),
        #                   ReLU(),
        #                   MaxPool1d(2,1), 
        #                   Conv1d(16, 8, 3, 1), # 26
        #                   ReLU(),
        #                   Flatten(),
        #                   Linear(200, output_dim),
        #                   )
        # 20 Epochs
        # tn: 8, fp: 23, fn: 11, tp: 245
        # return Sequential(Conv1d(input_dim, 16, 3, 1),
        #                   ReLU(),
        #                   MaxPool1d(2,1), 
        #                   Conv1d(16, 8, 3, 1), # 26
        #                   ReLU(),
        #                   Flatten(),
        #                   Linear(200, output_dim),
        #                   )
        
        # tn: 5, fp: 26, fn: 4, tp: 252
        # return Sequential(Conv1d(input_dim, 16, 3, 1),
        #                   ReLU(),
        #                   Conv1d(16, 8, 3, 1), # 26
        #                   ReLU(),
        #                 #   Conv1d(16, 8, 3, 1),
        #                 #   ReLU(),
        #                   Flatten(),
        #                   Linear(208, output_dim),
        #                   )

        # tn: 5, fp: 26, fn: 1, tp: 255
        # return Sequential(Conv1d(input_dim, 32, 3, 1),
        #                   ReLU(),
        #                   Conv1d(32, 16, 3, 1), # 26
        #                   ReLU(),
        #                   Conv1d(16, 8, 3, 1),
        #                 #   ReLU(),
        #                   Flatten(),
        #                   Linear(416, output_dim),
        #                   )